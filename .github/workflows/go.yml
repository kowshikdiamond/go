name: Go CI

on:
  push:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.17.0'

      - name: Install dependencies
        run: go mod tidy

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.58

      - name: Check linting results (optional)
        run: |
          if [ $? -ne 0 ]; then
            exit 1
          fi

      - name: Run unit tests
        run: go test ./...

  build:
      runs-on: ubuntu-latest
      needs: test
    
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          
        - name: Build and push Docker image
          if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature')
          uses: docker/build-push-action@v5
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
      
  deploy_to_Production:
                  runs-on: ubuntu-latest
                  needs: build
                  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              
                  steps:
                    - name: Deploy to staging
                      run: echo "Deploying to Production environment"
                      
  deploy_to_test:
                runs-on: ubuntu-latest
                needs: build
                if: startsWith(github.ref, 'refs/heads/feature') && github.event_name == 'push'
              
                steps:
                  - name: Deploy to test environment
                    run: echo "Deploying to test environment"
